import { AxiosInstance } from 'axios';
import { ConversationClientRequest, ConversationCreateParams, Conversation, ConversationUpdateParams, Participant, ConversationAction, Keystore } from '../types';
export declare class ConversationClient implements ConversationClientRequest {
    keystore: Keystore;
    request: AxiosInstance;
    uniqueConversationID: (userID: string, recipientID: string) => string;
    createConversation(params: ConversationCreateParams): Promise<Conversation>;
    updateConversation(conversationID: string, params: ConversationUpdateParams): Promise<Conversation>;
    createContactConversation(userID: string): Promise<Conversation>;
    createGroupConversation(conversationID: string, name: string, participant: Participant[]): Promise<Conversation>;
    readConversation(conversationID: string): Promise<Conversation>;
    managerConversation(conversationID: string, action: ConversationAction, participant: Participant[]): Promise<Conversation>;
    addParticipants(conversationID: string, userIDs: string[]): Promise<Conversation>;
    removeParticipants(conversationID: string, userIDs: string[]): Promise<Conversation>;
    adminParticipants(conversationID: string, userIDs: string[]): Promise<Conversation>;
    rotateConversation(conversationID: string): Promise<Conversation>;
}
export declare const readConversation: (token: string, conversation_id: string) => Promise<Conversation>;
