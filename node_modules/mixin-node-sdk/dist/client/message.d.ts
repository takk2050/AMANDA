/// <reference types="node" />
import { AxiosInstance } from 'axios';
import { AcknowledgementRequest, Keystore, MessageCategory, MessageClientRequest, MessageRequest, MessageView, ImageMessage, DataMessage, StickerMessage, ContactMessage, AppCardMessage, AudioMessage, LiveMessage, LocationMessage, VideoMessage, AppButtonMessage, RecallMessage, Session, EncryptMessageView, Attachment } from '../types';
export declare class MessageClient implements MessageClientRequest {
    keystore: Keystore;
    request: AxiosInstance;
    newUUID: () => string;
    uniqueConversationID: (userID: string, recipientID: string) => string;
    showAttachment: (attachment_id: string) => Promise<Attachment>;
    sendAcknowledgements(messages: AcknowledgementRequest[]): Promise<void>;
    sendAcknowledgement(message: AcknowledgementRequest): Promise<void>;
    sendMessage(message: MessageRequest): Promise<MessageView>;
    sendMessages(messages: MessageRequest[]): Promise<void>;
    sendMsg(recipient_id: string, category: MessageCategory, data: any): Promise<MessageView>;
    sendMessageText(userID: string, text: string): Promise<MessageView>;
    sendMessagePost(userID: string, text: string): Promise<MessageView>;
    sendTextMsg(userID: string, text: string): Promise<MessageView>;
    sendPostMsg(userID: string, text: string): Promise<MessageView>;
    sendImageMsg(userID: string, image: ImageMessage): Promise<MessageView>;
    sendDataMsg(userID: string, data: DataMessage): Promise<MessageView>;
    sendStickerMsg(userID: string, sticker: StickerMessage): Promise<MessageView>;
    sendContactMsg(userID: string, contact: ContactMessage): Promise<MessageView>;
    sendAppCardMsg(userID: string, appCard: AppCardMessage): Promise<MessageView>;
    sendAudioMsg(userID: string, audio: AudioMessage): Promise<MessageView>;
    sendLiveMsg(userID: string, live: LiveMessage): Promise<MessageView>;
    sendVideoMsg(userID: string, video: VideoMessage): Promise<MessageView>;
    sendLocationMsg(userID: string, location: LocationMessage): Promise<MessageView>;
    sendAppButtonMsg(userID: string, appButton: AppButtonMessage[]): Promise<MessageView>;
    sendRecallMsg(userID: string, message: RecallMessage): Promise<MessageView>;
    sendEncryptMessage(message: MessageRequest): Promise<EncryptMessageView>;
    _sendEncryptMsg(userID: string, category: MessageCategory, data: any, isRetry?: boolean, message_id?: string, conversation_id?: string): Promise<EncryptMessageView>;
    sendEncryptMessagesRaw(messages: MessageRequest[]): Promise<EncryptMessageView[]>;
    sendEncryptTextMsg(userID: string, text: string): Promise<EncryptMessageView>;
    sendEncryptPostMsg(userID: string, text: string): Promise<EncryptMessageView>;
    sendEncryptImageMsg(userID: string, image: ImageMessage): Promise<EncryptMessageView>;
    sendEncryptDataMsg(userID: string, data: DataMessage): Promise<EncryptMessageView>;
    sendEncryptStickerMsg(userID: string, sticker: StickerMessage): Promise<EncryptMessageView>;
    sendEncryptContactMsg(userID: string, contact: ContactMessage): Promise<EncryptMessageView>;
    sendEncryptAudioMsg(userID: string, audio: AudioMessage): Promise<EncryptMessageView>;
    sendEncryptLiveMsg(userID: string, live: LiveMessage): Promise<EncryptMessageView>;
    sendEncryptVideoMsg(userID: string, video: VideoMessage): Promise<EncryptMessageView>;
    sendEncryptLocationMsg(userID: string, location: LocationMessage): Promise<EncryptMessageView>;
    sendEncryptMessages(_messages: MessageRequest[]): Promise<EncryptMessageView[]>;
    _sendEncryptMsgs(_messages: MessageRequest[], isRetry?: boolean, resp?: EncryptMessageView[]): Promise<EncryptMessageView[]>;
    getSessions(userIDs: string[]): Promise<Session[]>;
    getSessionsWithCache(userIDs: string[]): Promise<{
        [key: string]: Session[];
    }>;
    cacheSession(sessions: Session[]): {
        [key: string]: Session[];
    };
    decryptAttachmentByMsgData(msgData: {
        attachment_id: string;
        key?: string;
    }): Promise<Buffer>;
    getSessionByCache(userID: string): Session[] | undefined;
}
