import { AxiosInstance } from 'axios';
import { AddressClientRequest, AddressCreateParams, Address, AppClientRequest, UpdateAppRequest, App, FavoriteApp, AssetClientRequest, Asset, ExchangeRate, NetworkTicker, Attachment, AttachmentClientRequest, CollectiblesParams, CollectibleToken, CollectibleAction, CollectibleRequest, CollectibleOutput, RawCollectibleInput, ConversationClientRequest, ConversationCreateParams, Conversation, ConversationUpdateParams, Participant, ConversationAction, MessageClientRequest, AcknowledgementRequest, MessageRequest, MessageView, ImageMessage, DataMessage, StickerMessage, ContactMessage, AppCardMessage, AudioMessage, LiveMessage, LocationMessage, VideoMessage, AppButtonMessage, RecallMessage, TransactionInput, RawTransactionInput, MultisigClientRequest, MultisigRequest, MultisigUTXO, PINClientRequest, Turn, SnapshotClientRequest, Snapshot, SnapshotQuery, TransferClientRequest, TransferInput, Payment, GhostInput, GhostKeys, WithdrawInput, RawTransaction, UserClientRequest, User, UserRelationship, Keystore, MvmClientRequest, PaymentGenerateParams, OauthClientRequest, AuthData, Scope, EncryptMessageView, Session } from '../types';
export { verifyPayment } from './transfer';
import { CollectiblesClient } from './collectibles';
export * from './mvm';
export declare class Client implements AddressClientRequest, AppClientRequest, AssetClientRequest, AttachmentClientRequest, CollectiblesClient, ConversationClientRequest, MessageClientRequest, MultisigClientRequest, PINClientRequest, SnapshotClientRequest, TransferClientRequest, UserClientRequest, MvmClientRequest, OauthClientRequest {
    request: AxiosInstance;
    keystore: Keystore;
    constructor(keystore?: Keystore, token?: string);
    createAddress: (params: AddressCreateParams, pin?: string) => Promise<Address>;
    readAddress: (address_id: string) => Promise<Address>;
    readAddresses: (asset_id: string) => Promise<Address[]>;
    deleteAddress: (address_id: string, pin?: string) => Promise<void>;
    updateApp: (appID: string, params: UpdateAppRequest) => Promise<App>;
    readFavoriteApps: (userID: string) => Promise<FavoriteApp[]>;
    favoriteApp: (appID: string) => Promise<FavoriteApp>;
    unfavoriteApp: (appID: string) => Promise<void>;
    readAsset: (asset_id: string) => Promise<Asset>;
    readAssets: () => Promise<Asset[]>;
    readAssetFee: (asset_id: string) => Promise<number>;
    readAssetNetworkTicker: (asset_id: string, offset?: string) => Promise<NetworkTicker>;
    readExchangeRates: () => Promise<ExchangeRate[]>;
    createAttachment: () => Promise<Attachment>;
    showAttachment: (attachment_id: string) => Promise<Attachment>;
    uploadFile: (file: File) => Promise<Attachment>;
    newMintCollectibleTransferInput: (p: CollectiblesParams) => TransactionInput;
    readCollectibleToken: (id: string) => Promise<CollectibleToken>;
    readCollectibleOutputs: (members: string[], threshold: number, offset: string, limit: number) => Promise<CollectibleOutput[]>;
    makeCollectibleTransactionRaw: (txInput: RawCollectibleInput) => Promise<string>;
    createCollectibleRequest: (action: CollectibleAction, raw: string) => Promise<CollectibleRequest>;
    signCollectibleRequest: (requestId: string, pin?: string) => Promise<CollectibleRequest>;
    cancelCollectibleRequest: (requestId: string) => Promise<void>;
    unlockCollectibleRequest: (requestId: string, pin?: string) => Promise<void>;
    createConversation: (params: ConversationCreateParams) => Promise<Conversation>;
    updateConversation: (conversationID: string, params: ConversationUpdateParams) => Promise<Conversation>;
    createContactConversation: (userID: string) => Promise<Conversation>;
    createGroupConversation: (conversationID: string, name: string, participant: Participant[]) => Promise<Conversation>;
    readConversation: (conversationID: string) => Promise<Conversation>;
    managerConversation: (conversationID: string, action: ConversationAction, participant: Participant[]) => Promise<Conversation>;
    addParticipants: (conversationID: string, userIDs: string[]) => Promise<Conversation>;
    removeParticipants: (conversationID: string, userIDs: string[]) => Promise<Conversation>;
    adminParticipants: (conversationID: string, userIDs: string[]) => Promise<Conversation>;
    rotateConversation: (conversationID: string) => Promise<Conversation>;
    sendAcknowledgements: (messages: AcknowledgementRequest[]) => Promise<void>;
    sendAcknowledgement: (message: AcknowledgementRequest) => Promise<void>;
    sendMessage: (message: MessageRequest) => Promise<MessageView>;
    sendMessages: (messages: MessageRequest[]) => Promise<undefined>;
    sendMessageText: (userID: string, text: string) => Promise<MessageView>;
    sendMessagePost: (userID: string, text: string) => Promise<MessageView>;
    sendTextMsg: (userID: string, text: string) => Promise<MessageView>;
    sendPostMsg: (userID: string, text: string) => Promise<MessageView>;
    sendImageMsg: (userID: string, image: ImageMessage) => Promise<MessageView>;
    sendDataMsg: (userID: string, data: DataMessage) => Promise<MessageView>;
    sendStickerMsg: (userID: string, sticker: StickerMessage) => Promise<MessageView>;
    sendContactMsg: (userID: string, contact: ContactMessage) => Promise<MessageView>;
    sendAppCardMsg: (userID: string, appCard: AppCardMessage) => Promise<MessageView>;
    sendAudioMsg: (userID: string, audio: AudioMessage) => Promise<MessageView>;
    sendLiveMsg: (userID: string, live: LiveMessage) => Promise<MessageView>;
    sendVideoMsg: (userID: string, video: VideoMessage) => Promise<MessageView>;
    sendLocationMsg: (userID: string, location: LocationMessage) => Promise<MessageView>;
    sendAppButtonMsg: (userID: string, appButton: AppButtonMessage[]) => Promise<MessageView>;
    sendRecallMsg: (userID: string, message: RecallMessage) => Promise<MessageView>;
    sendEncryptMessage: (message: MessageRequest) => Promise<EncryptMessageView>;
    sendEncryptMessages: (messages: MessageRequest[]) => Promise<EncryptMessageView[]>;
    sendEncryptTextMsg: (userID: string, text: string) => Promise<EncryptMessageView>;
    sendEncryptPostMsg: (userID: string, text: string) => Promise<EncryptMessageView>;
    sendEncryptImageMsg: (userID: string, image: ImageMessage) => Promise<EncryptMessageView>;
    sendEncryptDataMsg: (userID: string, data: DataMessage) => Promise<EncryptMessageView>;
    sendEncryptStickerMsg: (userID: string, sticker: StickerMessage) => Promise<EncryptMessageView>;
    sendEncryptContactMsg: (userID: string, contact: ContactMessage) => Promise<EncryptMessageView>;
    sendEncryptAudioMsg: (userID: string, audio: AudioMessage) => Promise<EncryptMessageView>;
    sendEncryptLiveMsg: (userID: string, live: LiveMessage) => Promise<EncryptMessageView>;
    sendEncryptVideoMsg: (userID: string, video: VideoMessage) => Promise<EncryptMessageView>;
    sendEncryptLocationMsg: (userID: string, location: LocationMessage) => Promise<EncryptMessageView>;
    getSessions: (userIDs: string[]) => Promise<Session[]>;
    readMultisigs: (offset: string, limit: number) => Promise<MultisigUTXO[]>;
    readMultisigOutput: (id: string) => Promise<MultisigUTXO>;
    readMultisigOutputs: (members: string[], threshold: number, offset: string, limit: number) => Promise<MultisigUTXO[]>;
    createMultisig: (action: string, raw: string) => Promise<MultisigRequest>;
    signMultisig: (request_id: string, pin?: string) => Promise<MultisigRequest>;
    cancelMultisig: (request_id: string) => Promise<void>;
    unlockMultisig: (request_id: string, pin?: string) => Promise<void>;
    sendRawTransaction: (raw: string) => Promise<{
        hash: string;
    }>;
    readGhostKeys: (receivers: string[], index: number) => Promise<GhostKeys>;
    batchReadGhostKeys: (inputs: GhostInput[]) => Promise<GhostKeys[]>;
    makeMultisignTransaction: (txInput: RawTransactionInput) => Promise<string>;
    paymentGeneratorByContract: (params: PaymentGenerateParams) => Promise<Payment | TransactionInput>;
    verifyPin: (pin: string) => Promise<void>;
    modifyPin: (pin: string, oldPin?: string) => Promise<void>;
    readTurnServers: () => Promise<Turn[]>;
    readSnapshots: (params?: SnapshotQuery) => Promise<Snapshot[]>;
    readNetworkSnapshots: (params?: SnapshotQuery) => Promise<Snapshot[]>;
    readSnapshot: (snapshot_id: string) => Promise<Snapshot>;
    readNetworkSnapshot: (snapshot_id: string) => Promise<Snapshot>;
    verifyPayment: (params: TransferInput | TransactionInput) => Promise<Payment>;
    transfer: (params: TransferInput, pin?: string) => Promise<Snapshot>;
    readTransfer: (trace_id: string) => Promise<Snapshot>;
    transaction: (params: TransactionInput, pin?: string) => Promise<RawTransaction>;
    withdraw: (params: WithdrawInput, pin?: string) => Promise<Snapshot>;
    userMe: () => Promise<User>;
    readUser: (userIdOrIdentityNumber: string) => Promise<User>;
    readUsers: (userIDs: string[]) => Promise<User[]>;
    searchUser: (identityNumberOrPhone: string) => Promise<User>;
    readFriends: () => Promise<User[]>;
    createUser: (full_name: string, session_secret?: string) => Promise<User>;
    modifyProfile: (full_name?: string, avatar_base64?: string) => Promise<User>;
    modifyRelationships: (relationship: UserRelationship) => Promise<User>;
    readBlockUsers: () => Promise<User[]>;
    authorizeToken: (code: string, client_secret?: string, code_verifier?: string) => Promise<{
        access_token: string;
        scope: string;
    }>;
    getAuthorizeCode: (params: {
        client_id: string;
        scopes?: Scope[];
        pin?: string;
    }) => Promise<AuthData>;
    newUUID(): string;
    uniqueConversationID(userID: string, recipientID: string): string;
}
export declare const authorizeToken: (client_id: string, code: string, client_secret: string, code_verifier?: string | undefined) => Promise<{
    access_token: string;
    scope: string;
}>;
