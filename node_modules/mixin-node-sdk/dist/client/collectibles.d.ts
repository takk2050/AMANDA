import { AxiosInstance } from 'axios';
import { Keystore, TransactionInput, GhostInput, GhostKeys, CollectiblesClientRequest, CollectiblesParams, CollectibleToken, RawCollectibleInput, CollectibleAction, CollectibleRequest, CollectibleOutput } from '../types';
export declare class CollectiblesClient implements CollectiblesClientRequest {
    keystore: Keystore;
    request: AxiosInstance;
    batchReadGhostKeys: (inputs: GhostInput[]) => Promise<GhostKeys[]>;
    newMintCollectibleTransferInput(p: CollectiblesParams): TransactionInput;
    readCollectibleToken(id: string): Promise<CollectibleToken>;
    readCollectibleOutputs(_members: string[], threshold: number, offset: string, limit: number): Promise<CollectibleOutput[]>;
    makeCollectibleTransactionRaw(txInput: RawCollectibleInput): Promise<string>;
    createCollectibleRequest(action: CollectibleAction, raw: string): Promise<CollectibleRequest>;
    signCollectibleRequest(requestId: string, pin?: string): Promise<CollectibleRequest>;
    cancelCollectibleRequest(requestId: string): Promise<void>;
    unlockCollectibleRequest(requestId: string, pin?: string): Promise<void>;
}
export declare const createCollectibleRequest: (token: string, action: CollectibleAction, raw: string) => Promise<CollectibleRequest>;
