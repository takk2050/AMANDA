import { AxiosInstance } from 'axios';
import { Keystore, MultisigClientRequest, MultisigRequest, MultisigUTXO, MultisigAction, RawTransactionInput, GhostInput, GhostKeys } from '../types';
export declare class MultisigsClient implements MultisigClientRequest {
    keystore: Keystore;
    request: AxiosInstance;
    readMultisigs(offset: string, limit: number): Promise<MultisigUTXO[]>;
    readMultisigOutput(id: string): Promise<MultisigUTXO>;
    readMultisigOutputs(members: string[], threshold: number, offset: string, limit: number): Promise<MultisigUTXO[]>;
    createMultisig(action: MultisigAction, raw: string): Promise<MultisigRequest>;
    signMultisig(request_id: string, pin?: string): Promise<MultisigRequest>;
    cancelMultisig(request_id: string): Promise<void>;
    unlockMultisig(request_id: string, pin?: string): Promise<void>;
    readGhostKeys(receivers: string[], index: number): Promise<GhostKeys>;
    batchReadGhostKeys(inputs: GhostInput[]): Promise<GhostKeys[]>;
    makeMultisignTransaction(txInput: RawTransactionInput): Promise<string>;
}
